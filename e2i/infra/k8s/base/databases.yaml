---
# Airflow PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-postgres
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-postgres
  template:
    metadata:
      labels:
        app: airflow-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "airflow"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: airflow-postgres-password
        - name: POSTGRES_DB
          value: "airflow"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -d
            - airflow
            - -U
            - airflow
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -d
            - airflow
            - -U
            - airflow
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: airflow-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: airflow-postgres
  namespace: datawarehouse
spec:
  selector:
    app: airflow-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Orchestrator PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator-postgres
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orchestrator-postgres
  template:
    metadata:
      labels:
        app: orchestrator-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "e2i_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: e2i-postgres-password
        - name: POSTGRES_DB
          value: "e2i_db"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - e2i_user
            - -d
            - e2i_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - e2i_user
            - -d
            - e2i_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: orchestrator-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: orchestrator-postgres
  namespace: datawarehouse
spec:
  selector:
    app: orchestrator-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Tokenization PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tokenization-postgres
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tokenization-postgres
  template:
    metadata:
      labels:
        app: tokenization-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "tokenization_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: tokenization-postgres-password
        - name: POSTGRES_DB
          value: "tokenization_db"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - tokenization_user
            - -d
            - tokenization_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - tokenization_user
            - -d
            - tokenization_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: tokenization-postgres-pvc
      - name: init-sql
        configMap:
          name: tokenization-init-sql

---
apiVersion: v1
kind: Service
metadata:
  name: tokenization-postgres
  namespace: datawarehouse
spec:
  selector:
    app: tokenization-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Metabase PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metabase-postgres
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metabase-postgres
  template:
    metadata:
      labels:
        app: metabase-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "metabase"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: metabase-postgres-password
        - name: POSTGRES_DB
          value: "metabase"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - metabase
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - metabase
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: metabase-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: metabase-postgres
  namespace: datawarehouse
spec:
  selector:
    app: metabase-postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
