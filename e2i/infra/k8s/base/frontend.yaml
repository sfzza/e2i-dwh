---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
      - name: wait-for-django
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -f http://django:8001/health; do echo waiting for django; sleep 2; done;']
      containers:
      - name: frontend
        image: your-registry/e2i-frontend:latest  # Update with your actual image
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: datawarehouse
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Metabase Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metabase
  namespace: datawarehouse
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metabase
  template:
    metadata:
      labels:
        app: metabase
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:16
        command: ['sh', '-c', 'until pg_isready -h metabase-postgres -p 5432 -U metabase; do echo waiting for postgres; sleep 2; done;']
      - name: wait-for-clickhouse
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -f http://clickhouse:8123/ping; do echo waiting for clickhouse; sleep 2; done;']
      containers:
      - name: metabase
        image: metabase/metabase:latest
        ports:
        - containerPort: 3000
        env:
        - name: MB_DB_TYPE
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_TYPE
        - name: MB_DB_DBNAME
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_DBNAME
        - name: MB_DB_PORT
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_PORT
        - name: MB_DB_USER
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_USER
        - name: MB_DB_PASS
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_PASS
        - name: MB_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: metabase-config
              key: MB_DB_HOST
        volumeMounts:
        - name: metabase-data
          mountPath: /metabase-data
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: metabase-data
        persistentVolumeClaim:
          claimName: metabase-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: metabase
  namespace: datawarehouse
spec:
  selector:
    app: metabase
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
