"""
Django settings for e2i_api project - Updated with authentication.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# ---------------------------------------------------------------------
# PATHS
# ---------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ---------------------------------------------------------------------
# SECURITY
# ---------------------------------------------------------------------
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-wkqz(%w4e10#fg+toyr1xfk$e@1_@k^g$0tou83$q^gb_h)mbr",  # fallback for dev
)

DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = (
    os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if not DEBUG else ["*"]
)

# ---------------------------------------------------------------------
# APPLICATIONS
# ---------------------------------------------------------------------
INSTALLED_APPS = [
    # Django defaults
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",
    "corsheaders",

    # Project apps
    "e2i_api.apps.common",
    "e2i_api.apps.ingestion",
    "e2i_api.apps.reporting",
]

# ---------------------------------------------------------------------
# MIDDLEWARE
# ---------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    
    # Keep only the core authentication middleware
    "e2i_api.apps.common.auth.AuthenticationMiddleware",
    
    # Comment out ALL the problematic middleware temporarily:
    # "e2i_api.apps.common.middleware.RateLimitMiddleware",
    # "e2i_api.apps.common.middleware.SecurityHeadersMiddleware", 
    # "e2i_api.apps.common.middleware.FailedLoginTrackingMiddleware",
    # "e2i_api.apps.common.middleware.RequestLoggingMiddleware",  # This is causing the current error
    
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "e2i_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "e2i_api.wsgi.application"

# ---------------------------------------------------------------------
# DATABASE
# ---------------------------------------------------------------------
# Database configuration with Railway support
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "railway",
        "USER": "postgres", 
        "PASSWORD": "password",
        "HOST": "localhost",
        "PORT": "5432",
    }
}

# Railway database configuration - takes precedence
if os.getenv("DATABASE_URL"):
    try:
        import dj_database_url
        DATABASES["default"] = dj_database_url.parse(os.getenv("DATABASE_URL"))
        print("‚úÖ Using Railway DATABASE_URL for database connection")
    except Exception as e:
        print(f"‚ùå Error parsing DATABASE_URL: {e}")
        print("üìù Please ensure PostgreSQL addon is added to your Railway project")

# Fallback for local development
elif os.getenv("DJANGO_DB_HOST"):
    DATABASES["default"] = {
        "ENGINE": os.getenv("DJANGO_DB_ENGINE", "django.db.backends.postgresql"),
        "NAME": os.getenv("DJANGO_DB_NAME", "e2i_db"),
        "USER": os.getenv("DJANGO_DB_USER", "e2i_user"),
        "PASSWORD": os.getenv("DJANGO_DB_PASSWORD", "e2i_pass"),
        "HOST": os.getenv("DJANGO_DB_HOST"),
        "PORT": os.getenv("DJANGO_DB_PORT", "5432"),
    }
    print("üìù Using custom database configuration")
else:
    print("‚ùå No database configuration found!")
    print("üìù Please add PostgreSQL addon to Railway or set DATABASE_URL environment variable")

# ---------------------------------------------------------------------
# AUTHENTICATION
# ---------------------------------------------------------------------
AUTH_USER_MODEL = 'common.User'

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Session configuration for web-based login
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # 7 days
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_SAVE_EVERY_REQUEST = True

# ---------------------------------------------------------------------
# RATE LIMITING
# ---------------------------------------------------------------------
RATE_LIMIT_ADMIN_PER_HOUR = 2000
RATE_LIMIT_USER_PER_HOUR = 1000
RATE_LIMIT_ANONYMOUS_PER_HOUR = 100
MAX_LOGIN_ATTEMPTS = 5
LOGIN_LOCKOUT_DURATION = 900  # 15 minutes in seconds

# ---------------------------------------------------------------------
# CACHES
# ---------------------------------------------------------------------
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# ---------------------------------------------------------------------
# INTERNATIONALIZATION
# ---------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ---------------------------------------------------------------------
# STATIC & MEDIA
# ---------------------------------------------------------------------
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Only add static directory if it exists
STATICFILES_DIRS = []
if (BASE_DIR / "static").exists():
    STATICFILES_DIRS = [BASE_DIR / "static"]

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# ---------------------------------------------------------------------
# DEFAULT PRIMARY KEY
# ---------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ---------------------------------------------------------------------
# REST FRAMEWORK
# ---------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# ---------------------------------------------------------------------
# CORS
# ---------------------------------------------------------------------
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',
    'x-session-token',
    'x-user-id',
]

# ---------------------------------------------------------------------
# LOGGING
# ---------------------------------------------------------------------
# Ensure logs directory exists
import os
os.makedirs('/app/logs', exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': '/app/logs/django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'e2i_api.requests': {
            'handlers': ['console'],  # Only console for Railway
            'level': 'INFO',
            'propagate': False,
        },
        'e2i_api': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

# ---------------------------------------------------------------------
# MINIO (object storage for ingestion)
# ---------------------------------------------------------------------
MINIO_STORAGE = {
    "ENDPOINT": os.getenv("MINIO_ENDPOINT", "http://localhost:9000"),
    "ACCESS_KEY": os.getenv("MINIO_ACCESS_KEY", "minioadmin"),
    "SECRET_KEY": os.getenv("MINIO_SECRET_KEY", "minioadmin"),
    "BUCKET_NAME": os.getenv("MINIO_BUCKET", "uploads"),
    "USE_SSL": os.getenv("MINIO_USE_SSL", "False").lower() == "true",
}

# ---------------------------------------------------------------------
# CLICKHOUSE (for reporting service)
# ---------------------------------------------------------------------
CLICKHOUSE = {
    "HOST": os.getenv("CLICKHOUSE_HOST", "clickhouse"),
    "PORT": int(os.getenv("CLICKHOUSE_PORT", "9000")),
    "USER": os.getenv("CLICKHOUSE_USER", "user"),
    "PASSWORD": os.getenv("CLICKHOUSE_PASSWORD", "password"),
    "DATABASE": os.getenv("CLICKHOUSE_DB", "default"),
    "QUERY_TIMEOUT": int(os.getenv("CLICKHOUSE_QUERY_TIMEOUT", "30")),
}

# ---------------------------------------------------------------------
# REPORTING CONFIGURATION
# ---------------------------------------------------------------------
REPORTING = {
    "EXPORT_DIR": os.getenv("REPORTING_EXPORT_DIR", str(BASE_DIR / "exports")),
    "EXPORT_TTL_SECONDS": int(os.getenv("REPORTING_EXPORT_TTL", "3600")),
    "MAX_EXPORT_ROWS": int(os.getenv("REPORTING_MAX_EXPORT_ROWS", "100000")),
}

# ---------------------------------------------------------------------
# DETOKENIZATION SERVICE
# ---------------------------------------------------------------------
DETOKENIZATION = {
    "ENDPOINT": os.getenv("DETOKENIZATION_ENDPOINT", "http://detokenization-service:8080"),
    "API_KEY": os.getenv("DETOKENIZATION_API_KEY", ""),
    "TIMEOUT": int(os.getenv("DETOKENIZATION_TIMEOUT", "30")),
}

# ---------------------------------------------------------------------
# AUTHENTICATION CONFIGURATION (REMOVED - Superseded by new settings)
# ---------------------------------------------------------------------
# This section has been replaced by the new RATE_LIMITING and other specific settings.